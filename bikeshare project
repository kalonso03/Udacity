import datetime
import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }
MONTH_DATA = {'january':1, 'february':2, 'march':3, 'april':4, 'may':5, 'june':6, 'all':7}

DAY_DATA = {'sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'}

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    city = input('Would you like to get data for chicago, new york city, or washington?')
    while city not in CITY_DATA:
        city = input("This is not a valid city!").lower()
    print('You chose: ',city)
        

    # get user input for month (all, january, february, ... , june)
    month = input('Which month would you like to see (january-june)?  Type "all" to see all months.')
    while month not in MONTH_DATA:
        month = input("This is not a valid month!").lower()
    print('You chose: ',month)

    
    # get user input for day of week (all, monday, tuesday, ... sunday)
    day = input('Which day of the week do you want to see?  Type "all" to see all days.')
    while day not in DAY_DATA:
        day = input("This is not a valid day!").lower()
    print('You chose: ',day)


    print('-'*40)
    return city, month, day

def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv('{}.csv'.format(city.replace(" ","_")))
    
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    df['End Time'] = pd.to_datetime(df['End Time'])
    df['month'] = df['Start Time'].dt.month
    df['day'] = df['Start Time'].dt.weekday_name
    
    ##month filter
    if month != 'all':
        df = df[df['month'] == MONTH_DATA[month]]   

    
    ##day filter
    if day != 'all':
        df = df[df['day'] == day.capitalize()]
    

    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # display the most common month
    common_month = df['month'].mode()[0]
    
    print(f'The most common month is {common_month}')

    # display the most common day of week
    common_day = df['day'].mode()[0]
    
    print(f'The most common day of the week is {common_day}')

    # display the most common start hour
    df['hour'] = df['Start Time'].dt.hour
    common_start = df['hour'].mode()[0]
    
    print(f'The most common start hour is {common_start}')

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # display most commonly used start station
    common_start_station = df['Start Station'].mode()[0]
    
    print(f'The most common start station is {common_start_station}')

    # display most commonly used end station
    common_end_station = df['End Station'].mode()[0]
    
    print(f'The most common end station is {common_end_station}')

    # display most frequent combination of start station and end station trip
    df['combo_station'] = df['Start Station']+ " - " + df['End Station']
    common_combo_station = df['combo_station'].mode().values[0]
    
    print(f'The most common station combo is {common_combo_station}')

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # display total travel time
    total_travel = sum(df['Trip Duration'])
    
    print(f'Total travel time is {total_travel/60} minutes')

    # display mean travel time
    mean_travel = df['Trip Duration'].mean()
    
    print(f'Mean travel time is {mean_travel/60} minutes')

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # Display counts of user types
    user_types = df['User Type'].value_counts()
    
    print(f'The counts of user types is {user_types}')

    # Display counts of gender
    try:
        gender_count = df['Gender'].value_counts()
        print(f'The counts of gender are {gender_count}')
    except:
        print('There is no Gender column in this file.')
    # Display earliest, most recent, and most common year of birth
    
    try:
        earliest_birth = df['Birth Year'].min()
        print(f'The earliest birth year is {earliest_birth}')
    except:
        print('There is no Birth Year column in this file.')
    
    try:
        recent_birth = df['Birth Year'].max()
        print(f'The latest birth year is {recent_birth}')
    except:
        print('There is no Birth Year column in this file.')
        
    try:
        common_birth = df['Birth Year'].mode()
        print(f'The common birth year is {common_birth}')
    except:
        print('There is no Birth Year column in this file.')    
 

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break
            
            
if __name__ == "__main__":
	main()
